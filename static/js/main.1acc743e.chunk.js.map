{"version":3,"sources":["ItemInput/ItemInput.js","ItemList/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["ItemInput","props","react_default","a","createElement","type","className","placeholder","onChange","event","change","target","value","onKeyPress","key","keyPress","console","log","onClick","add","ItemList","itemlistClick","concat","id","strike","itemProp","App","state","itemName","items","onAddClick","listOfItems","Object","toConsumableArray","_this","push","name","strikeThrough","setState","onItemListKeyPress","onInputChange","onItemListClick","element","includes","index","splice","_this2","this","src_ItemInput_ItemInput","map","item","src_ItemList_ItemList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAkBeA,SAfG,SAACC,GACf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACIC,KAAK,OACLC,UAAU,QACVC,YAAY,qBACZC,SAAW,SAACC,GAAD,OAAWR,EAAMS,OAAOD,EAAME,OAAOC,QAChDC,WAAa,SAACJ,GAAD,MAAyB,UAAdA,EAAMK,IAAiBb,EAAMc,WAAaC,QAAQC,IAAI,gBAElFf,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASY,QAAUjB,EAAMkB,KAA3C,UCMGC,eAhBE,SAACnB,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OACIc,QAAU,kBAAMjB,EAAMoB,cAAN,WAAAC,OAAgCrB,EAAMsB,IAAOtB,EAAMsB,KACnEjB,UAAYL,EAAMuB,OAAS,YAAc,MAEvCvB,EAAMwB,UAEZvB,EAAAC,EAAAC,cAAA,KAAGc,QAAU,kBAAMjB,EAAMoB,cAAN,QAAAC,OAA4BrB,EAAMsB,GAAGtB,EAAMsB,KAAQtB,EAAMsB,KAAQjB,UAAU,qBCwD/FoB,6MA/DbC,MAAQ,CACNC,SAAU,GACVC,MAAO,MAGTC,WAAa,WACX,IAAIC,EAAWC,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAME,OACjCE,EAAYI,KAAK,CAAEC,KAAMF,EAAKP,MAAMC,SAAUS,eAAe,IAC7DH,EAAKI,SAAS,CAACT,MAAOE,OAGxBQ,mBAAqB,WACnBvB,QAAQC,IAAI,sBACZ,IAAIc,EAAWC,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAME,OACjCE,EAAYI,KAAK,CAAEC,KAAMF,EAAKP,MAAMC,SAAUS,eAAe,IAC7DH,EAAKI,SAAS,CAACT,MAAOE,OAGxBS,cAAgB,SAACZ,GACfM,EAAKI,SAAS,CAACV,SAAUA,OAG3Ba,gBAAkB,SAACC,EAASnB,GAE1B,GADAP,QAAQC,IAAIyB,EAAS,UAAWnB,GAC3BmB,EAAQC,SAAS,SAAW,CAC/B,IAAIZ,EAAWC,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAME,OAC7Be,EAAQrB,EACZQ,EAAYc,OAAOD,EAAO,GAC1BV,EAAKI,SAAS,CAAET,MAAOE,QAClB,CACH,IAAIA,EAAWC,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAME,OAC7Be,EAAQrB,EACZQ,EAAYa,GAAOP,eAAiBN,EAAYa,GAAOP,cACvDH,EAAKI,SAAS,CAAET,MAAOE,8EAIpB,IAAAe,EAAAC,KACP,OACE7C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAC4C,EAAD,CACE7B,IAAM4B,KAAKjB,WACXpB,OAASqC,KAAKP,cACdzB,SAAWgC,KAAKR,qBAElBrC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAEbyC,KAAKpB,MAAME,MAAMoB,IAAI,SAACC,EAAMN,GAC1B,OAAO1C,EAAAC,EAAAC,cAAC+C,EAAD,CACL1B,SAAWyB,EAAKd,KAChBtB,IAAG,OAAAQ,OAAUsB,GACbrB,GAAE,GAAAD,OAAMsB,GACRvB,cAAgByB,EAAKL,gBACrBjB,OAAS0B,EAAKb,2BAtDVe,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1acc743e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ItemInput.css';\r\n\r\nconst ItemInput = (props) => {\r\n    return (\r\n        <div>\r\n            <input \r\n                type=\"text\" \r\n                className='input' \r\n                placeholder='Add Item to List..' \r\n                onChange={ (event) => props.change(event.target.value) } \r\n                onKeyPress={ (event) => event.key === 'Enter'? props.keyPress() : console.log('god knows') }\r\n            />\r\n            <button className='button' onClick={ props.add }>Add</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemInput;","import React from 'react';\r\nimport './ItemList.css';\r\n\r\nconst ItemList = (props) => {\r\n    return (\r\n        <div className='item-style'>\r\n            <div>\r\n                <div \r\n                    onClick={ () => props.itemlistClick( `itemline${props.id}`, (props.id) ) }                     \r\n                    className={ props.strike ? 'strikeout' : null }\r\n                >\r\n                    { props.itemProp }\r\n                </div>\r\n                <i onClick={ () => props.itemlistClick(`trash${props.id[props.id]}`, (props.id) ) } className=\"fas fa-trash\"></i>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemList;","import React, {Component} from 'react';\r\nimport ItemInput from './ItemInput/ItemInput';\r\nimport './App.css';\r\nimport ItemList from './ItemList/ItemList';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    itemName: '',\r\n    items: [],\r\n  };\r\n\r\n  onAddClick = () => {\r\n    let listOfItems = [...this.state.items];\r\n    listOfItems.push({ name: this.state.itemName, strikeThrough: false });\r\n    this.setState({items: listOfItems});\r\n  }\r\n\r\n  onItemListKeyPress = () => {\r\n    console.log('onItemListKeyPress');\r\n    let listOfItems = [...this.state.items];\r\n    listOfItems.push({ name: this.state.itemName, strikeThrough: false });\r\n    this.setState({items: listOfItems});\r\n  }\r\n\r\n  onInputChange = (itemName) => {\r\n    this.setState({itemName: itemName});\r\n  }\r\n\r\n  onItemListClick = (element, id) => {\r\n    console.log(element, 'clicked', id);\r\n    if ( element.includes('trash') ) {\r\n      let listOfItems = [...this.state.items];\r\n      let index = id;\r\n      listOfItems.splice(index, 1);\r\n      this.setState({ items: listOfItems });\r\n    } else {\r\n        let listOfItems = [...this.state.items];\r\n        let index = id;\r\n        listOfItems[index].strikeThrough = !listOfItems[index].strikeThrough;\r\n        this.setState({ items: listOfItems });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ItemInput \r\n          add={ this.onAddClick } \r\n          change={ this.onInputChange }\r\n          keyPress={ this.onItemListKeyPress }\r\n          />\r\n        <div className='item-wrapper'>\r\n        {\r\n          this.state.items.map((item, index) => {\r\n            return <ItemList \r\n              itemProp={ item.name } \r\n              key={ `item${index}` } \r\n              id={ `${index}` } \r\n              itemlistClick={ this.onItemListClick }               \r\n              strike={ item.strikeThrough }\r\n              />\r\n          })\r\n        }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["ItemInput/ItemInput.js","ItemList/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["ItemInput","props","react_default","a","createElement","type","className","placeholder","onChange","event","change","target","value","onClick","add","ItemList","itemlistClick","itemProp","App","state","itemName","items","onAddClick","listOfItems","Object","toConsumableArray","_this","push","setState","onInputChange","onItemListClick","element","console","log","_this2","this","src_ItemInput_ItemInput","map","item","index","src_ItemList_ItemList","key","concat","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAYeA,SATG,SAACC,GACf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,UAAU,QAAQC,YAAY,qBAAqBC,SAAW,SAACC,GAAD,OAAWR,EAAMS,OAAOD,EAAME,OAAOC,UACtHV,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASO,QAAUZ,EAAMa,KAA3C,UCOGC,eAXE,SAACd,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKS,QAAU,kBAAMZ,EAAMe,cAAc,eAAiBf,EAAMgB,UAChEf,EAAAC,EAAAC,cAAA,KAAGS,QAAU,kBAAMZ,EAAMe,cAAc,eAAgBV,UAAU,qBCiClEY,6MAnCbC,MAAQ,CACNC,SAAU,GACVC,MAAO,MAGTC,WAAa,WACX,IAAIC,EAAWC,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAME,OACjCE,EAAYI,KAAKD,EAAKP,MAAMC,UAC5BM,EAAKE,SAAS,CAACP,MAAOE,OAGxBM,cAAgB,SAACT,GACfM,EAAKE,SAAS,CAACR,SAAUA,OAG3BU,gBAAkB,SAACC,GACjBC,QAAQC,IAAIF,EAAS,oFAGd,IAAAG,EAAAC,KACP,OACEjC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACgC,EAAD,CAAWtB,IAAMqB,KAAKb,WAAaZ,OAASyB,KAAKN,gBACjD3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAEb6B,KAAKhB,MAAME,MAAMgB,IAAI,SAACC,EAAMC,GAC1B,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,CAAUvB,SAAWqB,EAAOG,IAAG,OAAAC,OAAWH,GAAUvB,cAAgBkB,EAAKJ,6BA3B1Ea,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc331bf5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ItemInput.css';\r\n\r\nconst ItemInput = (props) => {\r\n    return (\r\n        <div>\r\n            <input type=\"text\" className='input' placeholder='Add Item to List..' onChange={ (event) => props.change(event.target.value) } />\r\n            <button className='button' onClick={ props.add }>Add</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemInput;","import React from 'react';\r\nimport './ItemList.css';\r\n\r\nconst ItemList = (props) => {\r\n    return (\r\n        <div className='item-style'>\r\n            <div>\r\n                <div onClick={ () => props.itemlistClick('Item Line') }>{ props.itemProp }</div>\r\n                <i onClick={ () => props.itemlistClick('Trash Icon') } className=\"fas fa-trash\"></i>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemList;","import React, {Component} from 'react';\nimport ItemInput from './ItemInput/ItemInput';\nimport './App.css';\nimport ItemList from './ItemList/ItemList';\n\nclass App extends Component {\n  state = {\n    itemName: '',\n    items: []\n  };\n\n  onAddClick = () => {        \n    let listOfItems = [...this.state.items];\n    listOfItems.push(this.state.itemName);\n    this.setState({items: listOfItems});\n  }\n\n  onInputChange = (itemName) => {    \n    this.setState({itemName: itemName});\n  }\n\n  onItemListClick = (element) => {\n    console.log(element, 'clicked');\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ItemInput add={ this.onAddClick } change={ this.onInputChange }/>\n        <div className='item-wrapper'>\n        {\n          this.state.items.map((item, index) => {\n            return <ItemList itemProp={ item } key= { `item${index}` } itemlistClick={ this.onItemListClick }/>\n          })\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
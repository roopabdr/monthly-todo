{"version":3,"sources":["ItemInput/ItemInput.js","ItemList/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["ItemInput","props","react_default","a","createElement","type","className","placeholder","onChange","event","change","target","value","onKeyPress","key","keyPress","onClick","add","ItemList","itemlistClick","concat","id","strike","itemProp","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveToLocalStorage","label","Storage","localStorage","setItem","JSON","stringify","onAddClick","listOfItems","toConsumableArray","state","items","push","name","itemName","strikeThrough","setState","onItemListKeyPress","onInputChange","onItemListClick","element","includes","index","splice","getItem","parse","_this2","src_ItemInput_ItemInput","map","item","src_ItemList_ItemList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.709001cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ItemInput.css';\r\n\r\nconst ItemInput = (props) => {\r\n    return (\r\n        <div>\r\n            <input \r\n                type=\"text\" \r\n                className='input' \r\n                placeholder='Add Item to List..' \r\n                onChange={ (event) => props.change(event.target.value) } \r\n                onKeyPress={ (event) => event.key === 'Enter'? props.keyPress() : null }\r\n                value = { props.value }\r\n            />\r\n            <button className='button' onClick={ props.add }>Add</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemInput;","import React from 'react';\r\nimport './ItemList.css';\r\n\r\nconst ItemList = (props) => {\r\n    return (\r\n        <div className='item-style'>\r\n            <div>\r\n                <div \r\n                    onClick={ () => props.itemlistClick( `itemline${props.id}`, (props.id) ) }                     \r\n                    className={ props.strike ? 'strikeout' : null }\r\n                >\r\n                    { props.itemProp }\r\n                </div>\r\n                <i onClick={ () => props.itemlistClick(`trash${props.id[props.id]}`, (props.id) ) } className=\"fas fa-trash\"></i>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemList;","import React, {Component} from 'react';\r\nimport ItemInput from './ItemInput/ItemInput';\r\nimport './App.css';\r\nimport ItemList from './ItemList/ItemList';\r\n\r\nclass App extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n        if (!(localStorage.getItem('items'))) {\r\n            let itemsArray = [];\r\n            localStorage.setItem('items', JSON.stringify(itemsArray));\r\n        }\r\n        else {\r\n            this.state = {\r\n                itemName: '',\r\n                items: JSON.parse(localStorage.getItem('items')),\r\n            };\r\n        }\r\n    }\r\n\r\n  saveToLocalStorage = (label, value) => {\r\n    if (typeof (Storage) !== \"undefined\") {\r\n        localStorage.setItem(label, JSON.stringify(value));\r\n    }\r\n  }\r\n\r\n  onAddClick = () => {\r\n    let listOfItems = [...this.state.items];\r\n    listOfItems.push({ name: this.state.itemName, strikeThrough: false });\r\n    this.setState({itemName: '', items: listOfItems});\r\n    this.saveToLocalStorage('items', listOfItems);\r\n  }\r\n\r\n  onItemListKeyPress = () => {\r\n    // console.log('onItemListKeyPress');\r\n    let listOfItems = [...this.state.items];\r\n    listOfItems.push({ name: this.state.itemName, strikeThrough: false });\r\n    this.setState({itemName: '', items: listOfItems});\r\n    this.saveToLocalStorage('items', listOfItems);\r\n  }\r\n\r\n  onInputChange = (itemName) => {\r\n    this.setState({itemName: itemName});\r\n  }\r\n\r\n  onItemListClick = (element, id) => {\r\n    // console.log(element, 'clicked', id);\r\n    if ( element.includes('trash') ) {\r\n      let listOfItems = [...this.state.items];\r\n      let index = id;\r\n      listOfItems.splice(index, 1);\r\n      this.setState({ items: listOfItems });\r\n      this.saveToLocalStorage('items', listOfItems);\r\n    } else {\r\n        let listOfItems = [...this.state.items];\r\n        let index = id;\r\n        listOfItems[index].strikeThrough = !listOfItems[index].strikeThrough;\r\n        this.setState({ items: listOfItems });\r\n        this.saveToLocalStorage('items', listOfItems);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ItemInput \r\n          add={ this.onAddClick } \r\n          change={ this.onInputChange }\r\n          keyPress={ this.onItemListKeyPress }\r\n          value = { this.state.itemName }\r\n          />\r\n        <div className='item-wrapper'>\r\n        {\r\n          this.state.items.map((item, index) => {\r\n            return <ItemList \r\n              itemProp={ item.name } \r\n              key={ `item${index}` } \r\n              id={ `${index}` } \r\n              itemlistClick={ this.onItemListClick }               \r\n              strike={ item.strikeThrough }\r\n              />\r\n          })\r\n        }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}